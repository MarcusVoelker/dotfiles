" Vim Modus statt Vi Modus verwenden
set nocompatible

" Use pathogen
call pathogen#infect()

" Backspace im Einfüge-Modus erlauben
set backspace=indent,eol,start

" Erkennung des Dateityps aktivieren
filetype plugin on

" Indenting anhand des Dateityps aktivieren
filetype indent on

" Automatically reload files
set autoread

" Switch from unsaved buffers
set hidden

" automatisches Indenting aktivieren
set ai

" Smart Indenting aktivieren
set si

" Better command line completion
set wildmenu
set wildmode=list:longest,full



" Backup Files in ~/.vim/backups erstellen und Dateiendung .bak anfügen
set backup
set backupdir=~/.backups
set backupext=.bak

" History des Kommandozeilen-Eingaben auf die letzten 1000 beschränken
set history=1000

" Position des Cursors in der Statusleiste anzeigen und aktuelle Zeile einfärben
set ruler
set cursorline

" Zeilennummern anzeigen
set nu

" öffnende und schließende Klammern hervorheben
set showmatch 

" Kommandos beim Eintippen rechts unten in der Statuszeile anzeigen
set showcmd

" inkrementelle Suche aktivieren, Groß-/Kleinschreibung bei der Suche
" ignorieren und Suchergebnisse einfärben
set incsearch
set ic
set smartcase
set hlsearch

set nostartofline

" Always keep some line before and after the cursor visible
set scrolloff=7
set sidescrolloff=7

set laststatus=2
set confirm
set cmdheight=2
set notimeout ttimeout ttimeoutlen=200

set list
set listchars=tab:>-,trail:-
set wrap

" disable arrow keys
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Leader stuff

let mapleader=","
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove
noremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
map <leader>br <leader>bb<leader>rr

" Syntax highlighting aktivieren
syntax on

" automatische Einrückung bei Autoident und Tab-Breite auf 4 setzen
set sw=4
set ts=4
set sts=4

" jj -> Esc in insert mode
inoremap jj <Esc>

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

noremap <F2> o<Esc>O
noremap <F7> :tabp<Enter>
noremap <F8> :tabn<Enter>

filetype plugin on
"let g:clang_user_options='|| exit 0'
"let g:clang_complete_auto=1
"let g:clang_complete_copen=1
"let g:clang_use_library=1
"let g:clang_library_path="/usr/lib/llvm/"

set expandtab

" Haskell
autocmd FileType haskell set tabstop=2
autocmd FileType haskell set shiftwidth=2
autocmd FileType haskell noremap <leader>bb :w<cr>:!cabal install<cr>
autocmd Filetype haskell noremap <leader>rr :!<C-r>=shellescape(fnamemodify('.', ':p:h:t'), 1)<cr><cr>
autocmd Filetype haskell noremap <leader>tt :!ghci %<cr>

" C++
autocmd FileType cpp noremap <leader>bb :w<cr>:!cmake . && make -j5<cr>
autocmd FileType cpp noremap <leader>sw :vimgrep /<cword>/gj src/**/*<cr>:cw<cr>

" Scala
autocmd FileType scala noremap <leader>bb :w<cr>:!scalac %<cr>
autocmd FileType scala noremap <leader>rr :w<cr>:!scala <cword><cr>

" Latex
autocmd FileType tex TTarget pdf
autocmd FileType tex map <leader>bb :w<cr><leader>ll
autocmd FileType tex map <leader>rr :!evince <C-r>=shellescape(fnamemodify(expand('%'),':r'), 1)<cr>.pdf<cr>

" Dot
autocmd FileType dot map <leader>bb :w<cr>:!dot -Tps % -o <C-r>=shellescape(fnamemodify(expand('%'),':r'), 1)<cr>.ps<cr>
autocmd FileType dot map <leader>rr :!evince <C-r>=shellescape(fnamemodify(expand('%'),':r'), 1)<cr>.ps<cr>

set t_Co=256
set background=dark
colorscheme darkocean
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

function! StartUp()
    if 0 == argc()
        NERDTree
    end
endfunction

autocmd VimEnter * call StartUp()
